package com.example.my_app.ui.screens.exercises

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import com.example.my_app.data.model.Exercise
import com.example.my_app.data.model.ExerciseCategory
import com.example.my_app.ui.navigation.Screen

@Composable
fun ExercisesScreen(
    navController: NavController,
    viewModel: ExercisesViewModel = hiltViewModel()
) {
    val uiState by viewModel.uiState.collectAsState()
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        // Header with search
        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = \"Egzersizlerim\",\n                style = MaterialTheme.typography.headlineMedium,\n                fontWeight = FontWeight.Bold,\n                modifier = Modifier.weight(1f)\n            )\n            \n            IconButton(\n                onClick = { /* TODO: Implement search */ }\n            ) {\n                Icon(\n                    imageVector = Icons.Default.Search,\n                    contentDescription = \"Ara\"\n                )\n            }\n        }\n        \n        Spacer(modifier = Modifier.height(16.dp))\n        \n        // Category filter\n        LazyRow(\n            horizontalArrangement = Arrangement.spacedBy(8.dp)\n        ) {\n            items(ExerciseCategory.values()) { category ->\n                FilterChip(\n                    onClick = { viewModel.selectCategory(category) },\n                    label = { Text(getCategoryName(category)) },\n                    selected = uiState.selectedCategory == category\n                )\n            }\n        }\n        \n        Spacer(modifier = Modifier.height(16.dp))\n        \n        // Exercise list\n        when {\n            uiState.isLoading -> {\n                Box(\n                    modifier = Modifier.fillMaxSize(),\n                    contentAlignment = Alignment.Center\n                ) {\n                    CircularProgressIndicator()\n                }\n            }\n            \n            uiState.exercises.isEmpty() -> {\n                Box(\n                    modifier = Modifier.fillMaxSize(),\n                    contentAlignment = Alignment.Center\n                ) {\n                    Column(\n                        horizontalAlignment = Alignment.CenterHorizontally\n                    ) {\n                        Icon(\n                            imageVector = Icons.Default.FitnessCenter,\n                            contentDescription = null,\n                            modifier = Modifier.size(64.dp),\n                            tint = MaterialTheme.colorScheme.outline\n                        )\n                        Spacer(modifier = Modifier.height(16.dp))\n                        Text(\n                            text = \"Henüz atanmış egzersiz bulunmuyor\",\n                            style = MaterialTheme.typography.bodyLarge\n                        )\n                    }\n                }\n            }\n            \n            else -> {\n                LazyColumn(\n                    verticalArrangement = Arrangement.spacedBy(12.dp)\n                ) {\n                    items(uiState.exercises) { exercise ->\n                        ExerciseListItem(\n                            exercise = exercise,\n                            onClick = {\n                                navController.navigate(\n                                    Screen.ExerciseDetail.createRoute(exercise.id)\n                                )\n                            },\n                            onStartExercise = {\n                                navController.navigate(\n                                    Screen.ExerciseSession.createRoute(exercise.id)\n                                )\n                            }\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun ExerciseListItem(\n    exercise: Exercise,\n    onClick: () -> Unit,\n    onStartExercise: () -> Unit\n) {\n    Card(\n        onClick = onClick,\n        modifier = Modifier.fillMaxWidth()\n    ) {\n        Column(\n            modifier = Modifier.padding(16.dp)\n        ) {\n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                verticalAlignment = Alignment.Top\n            ) {\n                Column(\n                    modifier = Modifier.weight(1f)\n                ) {\n                    Text(\n                        text = exercise.title,\n                        style = MaterialTheme.typography.titleMedium,\n                        fontWeight = FontWeight.Bold\n                    )\n                    \n                    Spacer(modifier = Modifier.height(4.dp))\n                    \n                    Text(\n                        text = exercise.description,\n                        style = MaterialTheme.typography.bodyMedium,\n                        maxLines = 2\n                    )\n                    \n                    Spacer(modifier = Modifier.height(8.dp))\n                    \n                    Row {\n                        Chip(\n                            onClick = { },\n                            label = { Text(\"${exercise.duration / 60} dk\") }\n                        )\n                        \n                        Spacer(modifier = Modifier.width(8.dp))\n                        \n                        Chip(\n                            onClick = { },\n                            label = { Text(\"${exercise.points} puan\") }\n                        )\n                        \n                        Spacer(modifier = Modifier.width(8.dp))\n                        \n                        Chip(\n                            onClick = { },\n                            label = { Text(getDifficultyName(exercise.difficulty)) }\n                        )\n                    }\n                }\n                \n                Column {\n                    Button(\n                        onClick = onStartExercise,\n                        modifier = Modifier.wrapContentWidth()\n                    ) {\n                        Icon(\n                            imageVector = Icons.Default.PlayArrow,\n                            contentDescription = null,\n                            modifier = Modifier.size(18.dp)\n                        )\n                        Spacer(modifier = Modifier.width(4.dp))\n                        Text(\"Başlat\")\n                    }\n                }\n            }\n        }\n    }\n}\n\nfun getCategoryName(category: ExerciseCategory): String {\n    return when (category) {\n        ExerciseCategory.GENERAL -> \"Genel\"\n        ExerciseCategory.SHOULDER -> \"Omuz\"\n        ExerciseCategory.KNEE -> \"Diz\"\n        ExerciseCategory.BACK -> \"Sırt\"\n        ExerciseCategory.NECK -> \"Boyun\"\n        ExerciseCategory.ANKLE -> \"Ayak Bileği\"\n        ExerciseCategory.WRIST -> \"Bilek\"\n        ExerciseCategory.HIP -> \"Kalça\"\n    }\n}\n\nfun getDifficultyName(difficulty: com.example.my_app.data.model.ExerciseDifficulty): String {\n    return when (difficulty) {\n        com.example.my_app.data.model.ExerciseDifficulty.BEGINNER -> \"Başlangıç\"\n        com.example.my_app.data.model.ExerciseDifficulty.INTERMEDIATE -> \"Orta\"\n        com.example.my_app.data.model.ExerciseDifficulty.ADVANCED -> \"İleri\"\n    }\n}"