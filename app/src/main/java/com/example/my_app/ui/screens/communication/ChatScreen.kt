package com.example.my_app.ui.screens.communication

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import com.example.my_app.data.model.Message
import com.example.my_app.data.model.MessageType
import java.text.SimpleDateFormat
import java.util.*

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ChatScreen(
    navController: NavController,
    conversationId: String,
    viewModel: ChatViewModel = hiltViewModel()
) {
    val uiState by viewModel.uiState.collectAsState()
    val listState = rememberLazyListState()
    
    LaunchedEffect(conversationId) {
        viewModel.loadMessages(conversationId)
    }
    
    // Auto-scroll to bottom when new messages arrive
    LaunchedEffect(uiState.messages.size) {
        if (uiState.messages.isNotEmpty()) {
            listState.animateScrollToItem(uiState.messages.size - 1)
        }
    }
    
    Column(
        modifier = Modifier.fillMaxSize()
    ) {
        // Top App Bar
        TopAppBar(
            title = {
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        imageVector = Icons.Default.Person,
                        contentDescription = null,
                        modifier = Modifier.size(32.dp),
                        tint = MaterialTheme.colorScheme.primary
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Column {
                        Text(
                            text = \"Dr. ${uiState.receiverName}\",\n                            style = MaterialTheme.typography.titleMedium,\n                            fontWeight = FontWeight.Bold\n                        )\n                        Text(\n                            text = if (uiState.isOnline) \"Çevrimiçi\" else \"Son görülme: bugün\",\n                            style = MaterialTheme.typography.bodySmall,\n                            color = if (uiState.isOnline) \n                                MaterialTheme.colorScheme.primary \n                            else \n                                MaterialTheme.colorScheme.outline\n                        )\n                    }\n                }\n            },\n            navigationIcon = {\n                IconButton(\n                    onClick = { navController.popBackStack() }\n                ) {\n                    Icon(\n                        imageVector = Icons.Default.ArrowBack,\n                        contentDescription = \"Geri\"\n                    )\n                }\n            },\n            actions = {\n                IconButton(\n                    onClick = { /* TODO: Voice call */ }\n                ) {\n                    Icon(\n                        imageVector = Icons.Default.Call,\n                        contentDescription = \"Sesli Arama\"\n                    )\n                }\n                \n                IconButton(\n                    onClick = { /* TODO: Video call */ }\n                ) {\n                    Icon(\n                        imageVector = Icons.Default.VideoCall,\n                        contentDescription = \"Görüntülü Arama\"\n                    )\n                }\n            }\n        )\n        \n        // Messages list\n        LazyColumn(\n            modifier = Modifier.weight(1f),\n            state = listState,\n            contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp),\n            verticalArrangement = Arrangement.spacedBy(8.dp)\n        ) {\n            items(uiState.messages) { message ->\n                MessageBubble(\n                    message = message,\n                    isFromCurrentUser = message.senderId == uiState.currentUserId\n                )\n            }\n            \n            if (uiState.isTyping) {\n                item {\n                    TypingIndicator()\n                }\n            }\n        }\n        \n        // Message input\n        MessageInput(\n            message = uiState.currentMessage,\n            onMessageChange = viewModel::updateMessage,\n            onSendMessage = viewModel::sendMessage,\n            onAttachFile = { /* TODO: File attachment */ },\n            isLoading = uiState.isSending\n        )\n    }\n}\n\n@Composable\nfun MessageBubble(\n    message: Message,\n    isFromCurrentUser: Boolean\n) {\n    Row(\n        modifier = Modifier.fillMaxWidth(),\n        horizontalArrangement = if (isFromCurrentUser) Arrangement.End else Arrangement.Start\n    ) {\n        if (!isFromCurrentUser) {\n            Icon(\n                imageVector = Icons.Default.Person,\n                contentDescription = null,\n                modifier = Modifier\n                    .size(32.dp)\n                    .padding(top = 4.dp),\n                tint = MaterialTheme.colorScheme.primary\n            )\n            Spacer(modifier = Modifier.width(8.dp))\n        }\n        \n        Column(\n            modifier = Modifier.widthIn(max = 280.dp),\n            horizontalAlignment = if (isFromCurrentUser) Alignment.End else Alignment.Start\n        ) {\n            Card(\n                shape = RoundedCornerShape(\n                    topStart = 16.dp,\n                    topEnd = 16.dp,\n                    bottomStart = if (isFromCurrentUser) 16.dp else 4.dp,\n                    bottomEnd = if (isFromCurrentUser) 4.dp else 16.dp\n                ),\n                colors = CardDefaults.cardColors(\n                    containerColor = if (isFromCurrentUser) \n                        MaterialTheme.colorScheme.primary \n                    else \n                        MaterialTheme.colorScheme.surfaceVariant\n                )\n            ) {\n                Column(\n                    modifier = Modifier.padding(12.dp)\n                ) {\n                    when (message.messageType) {\n                        MessageType.TEXT -> {\n                            Text(\n                                text = message.content,\n                                style = MaterialTheme.typography.bodyMedium,\n                                color = if (isFromCurrentUser) \n                                    MaterialTheme.colorScheme.onPrimary \n                                else \n                                    MaterialTheme.colorScheme.onSurfaceVariant\n                            )\n                        }\n                        \n                        MessageType.EXERCISE_REPORT -> {\n                            Row(\n                                verticalAlignment = Alignment.CenterVertically\n                            ) {\n                                Icon(\n                                    imageVector = Icons.Default.Assessment,\n                                    contentDescription = null,\n                                    modifier = Modifier.size(20.dp),\n                                    tint = if (isFromCurrentUser) \n                                        MaterialTheme.colorScheme.onPrimary \n                                    else \n                                        MaterialTheme.colorScheme.primary\n                                )\n                                Spacer(modifier = Modifier.width(8.dp))\n                                Text(\n                                    text = \"Egzersiz Raporu\",\n                                    style = MaterialTheme.typography.bodyMedium,\n                                    fontWeight = FontWeight.Bold,\n                                    color = if (isFromCurrentUser) \n                                        MaterialTheme.colorScheme.onPrimary \n                                    else \n                                        MaterialTheme.colorScheme.onSurfaceVariant\n                                )\n                            }\n                            Text(\n                                text = message.content,\n                                style = MaterialTheme.typography.bodySmall,\n                                color = if (isFromCurrentUser) \n                                    MaterialTheme.colorScheme.onPrimary \n                                else \n                                    MaterialTheme.colorScheme.onSurfaceVariant\n                            )\n                        }\n                        \n                        MessageType.IMAGE -> {\n                            // TODO: Image display\n                            Row(\n                                verticalAlignment = Alignment.CenterVertically\n                            ) {\n                                Icon(\n                                    imageVector = Icons.Default.Image,\n                                    contentDescription = null,\n                                    modifier = Modifier.size(20.dp)\n                                )\n                                Spacer(modifier = Modifier.width(8.dp))\n                                Text(\"Fotoğraf\")\n                            }\n                        }\n                        \n                        else -> {\n                            Text(\n                                text = message.content,\n                                style = MaterialTheme.typography.bodyMedium\n                            )\n                        }\n                    }\n                }\n            }\n            \n            Spacer(modifier = Modifier.height(2.dp))\n            \n            Row(\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                Text(\n                    text = SimpleDateFormat(\"HH:mm\", Locale.getDefault()).format(message.timestamp),\n                    style = MaterialTheme.typography.bodySmall,\n                    color = MaterialTheme.colorScheme.outline\n                )\n                \n                if (isFromCurrentUser) {\n                    Spacer(modifier = Modifier.width(4.dp))\n                    Icon(\n                        imageVector = if (message.isRead) Icons.Default.DoneAll else Icons.Default.Done,\n                        contentDescription = if (message.isRead) \"Okundu\" else \"Gönderildi\",\n                        modifier = Modifier.size(16.dp),\n                        tint = if (message.isRead) \n                            MaterialTheme.colorScheme.primary \n                        else \n                            MaterialTheme.colorScheme.outline\n                    )\n                }\n            }\n        }\n        \n        if (isFromCurrentUser) {\n            Spacer(modifier = Modifier.width(8.dp))\n            Icon(\n                imageVector = Icons.Default.AccountCircle,\n                contentDescription = null,\n                modifier = Modifier\n                    .size(32.dp)\n                    .padding(top = 4.dp),\n                tint = MaterialTheme.colorScheme.secondary\n            )\n        }\n    }\n}\n\n@Composable\nfun TypingIndicator() {\n    Row(\n        verticalAlignment = Alignment.CenterVertically\n    ) {\n        Icon(\n            imageVector = Icons.Default.Person,\n            contentDescription = null,\n            modifier = Modifier.size(32.dp),\n            tint = MaterialTheme.colorScheme.primary\n        )\n        Spacer(modifier = Modifier.width(8.dp))\n        \n        Card(\n            shape = RoundedCornerShape(16.dp),\n            colors = CardDefaults.cardColors(\n                containerColor = MaterialTheme.colorScheme.surfaceVariant\n            )\n        ) {\n            Row(\n                modifier = Modifier.padding(12.dp),\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                Text(\n                    text = \"yazıyor\",\n                    style = MaterialTheme.typography.bodyMedium,\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\n                )\n                Spacer(modifier = Modifier.width(8.dp))\n                CircularProgressIndicator(\n                    modifier = Modifier.size(16.dp),\n                    strokeWidth = 2.dp\n                )\n            }\n        }\n    }\n}\n\n@Composable\nfun MessageInput(\n    message: String,\n    onMessageChange: (String) -> Unit,\n    onSendMessage: () -> Unit,\n    onAttachFile: () -> Unit,\n    isLoading: Boolean\n) {\n    Card(\n        modifier = Modifier.fillMaxWidth()\n    ) {\n        Row(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(8.dp),\n            verticalAlignment = Alignment.Bottom\n        ) {\n            IconButton(\n                onClick = onAttachFile\n            ) {\n                Icon(\n                    imageVector = Icons.Default.AttachFile,\n                    contentDescription = \"Dosya Ekle\"\n                )\n            }\n            \n            OutlinedTextField(\n                value = message,\n                onValueChange = onMessageChange,\n                placeholder = { Text(\"Mesaj yazın...\") },\n                modifier = Modifier.weight(1f),\n                maxLines = 4\n            )\n            \n            Spacer(modifier = Modifier.width(8.dp))\n            \n            IconButton(\n                onClick = onSendMessage,\n                enabled = message.isNotBlank() && !isLoading\n            ) {\n                if (isLoading) {\n                    CircularProgressIndicator(\n                        modifier = Modifier.size(24.dp),\n                        strokeWidth = 2.dp\n                    )\n                } else {\n                    Icon(\n                        imageVector = Icons.Default.Send,\n                        contentDescription = \"Gönder\",\n                        tint = if (message.isNotBlank()) \n                            MaterialTheme.colorScheme.primary \n                        else \n                            MaterialTheme.colorScheme.outline\n                    )\n                }\n            }\n        }\n    }\n}"